The ``0-add_integer`` module
======================

Using ``add_integer``
-------------------

This is an example text file in reStructuredText format.  First import
``add_integer`` from the ``0-add_integer`` module:

    >>> add_integer = __import__('0-add_integer').add_integer

Now use it:

    #0 - Two pos ints
    >>> add_integer(1, 2)
    3

    #1 - pos & neg ints
    >>> add_integer(100, -2)
    98

    #2 - One pos int
    >>> add_integer(2)
    100

    #3 - pos float & neg int
    >>> add_integer(100.3, -2)
    98

    #5 - Two neg ints
    >>> add_integer(-3, -3)
    -6

    #6 - Returns an int
    >>> type(add_integer(2.5, 2.5))
    <class 'int'>

    #7 - pos int & string
    >>> add_integer(4, "School")
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

    #8 - None
    >>> add_integer()
    Traceback (most recent call last):
        ...
    TypeError: add_integer() missing 1 required positional argument: 'a'

    #9 - int and None
    >>> add_integer(5, 6, 7)
    Traceback (most recent call last):
        ...
    TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

    #10 - Overflow
    >>> add_integer(float('inf'), 2)
    Traceback (most recent call last):
        ...
    OverflowError: cannot convert float infinity to integer
    
