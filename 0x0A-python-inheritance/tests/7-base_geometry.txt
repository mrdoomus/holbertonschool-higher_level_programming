Using ``7-my_list`` module
======================

This is an example text file in reStructuredText format.  First
import ```BaseGeometry``` from the ``7_Base_Geometry`` module:

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

#0 - Default test
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)

#1 - Error when name is not int
>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
	...
TypeError: name must be an integer

#2 - Error when age is 0
>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
	...
ValueError: age must be greater than 0

#3 - Error when distance is <= 0
>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
        ...
ValueError: distance must be greater than 0

#4 - Error when area is not implemented
>>> bg1 = BaseGeometry()
>>> print(bg1.area())
Traceback (most recent call last):
    ...
Exception: area() is not implemented

#5 - Error when missing one argument
>>> bg1.integer_validator("doom", )
Traceback (most recent call last):
    ...
TypeError: integer_validator() missing 1 required positional argument: 'value'

#6 - Error when no arguments
>>> bg1.integer_validator()
Traceback (most recent call last):
    ...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

#7 - Error when only value argument is parse
>>> bg1.integer_validator(, 33)
Traceback (most recent call last):
    ...
SyntaxError: invalid syntax

#8 - Error when more than 2 arguments
>>> bg1.integer_validator("doom", 33, 01)
Traceback (most recent call last):
    ...
TypeError: integer_validator() takes 3 positional arguments but 4 were given